# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2.0.10

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Load Private Data
        env:
            RELEASE_KEYSTORE_PASSWORD: ${{ secrets.FIREBASE_API_KEY }}
        run: echo Load $RELEASE_KEYSTORE_PASSWORD from Private Stash!
        
      - name: Generate APK Debug
        run: |
          ./gradlew assembleDebug --stacktrace
          echo Generate those MFers!

      - name: Get release file apk path
        id: releaseApk
        run: echo "apkfile=$(find app/build/outputs/apk/debug/*.apk)" >> $GITHUB_OUTPUT

      - name: upload apk to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.FIREBASE_APP_ID}}
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: testers
          file: ${{ steps.releaseApk.outputs.apkfile }}

